// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Spotzer.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PlaceOrderFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "PlaceOrder.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PlaceOrder", "\tTo check the placement of order as \r\n\texpected for all the partners", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PlaceOrder")))
            {
                global::Spotzer.Tests.Features.PlaceOrderFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Place Order")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PlaceOrder")]
        public virtual void PlaceOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place Order", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Partner",
                        "Test Project"});
            table1.AddRow(new string[] {
                        "OrderID",
                        "1"});
            table1.AddRow(new string[] {
                        "TypeOfOrder",
                        "Type 1"});
            table1.AddRow(new string[] {
                        "SubmittedBy",
                        "test"});
            table1.AddRow(new string[] {
                        "CompanyID",
                        "1"});
            table1.AddRow(new string[] {
                        "CompanyName",
                        "test"});
            table1.AddRow(new string[] {
                        "ContactFirstName",
                        "test"});
            table1.AddRow(new string[] {
                        "ContactLastName",
                        "test"});
            table1.AddRow(new string[] {
                        "ContactTitle",
                        "test"});
            table1.AddRow(new string[] {
                        "ContactPhone",
                        "test"});
            table1.AddRow(new string[] {
                        "ContactMobile",
                        "test"});
            table1.AddRow(new string[] {
                        "ContactEmail",
                        "test"});
            table1.AddRow(new string[] {
                        "ExposureID",
                        "test"});
            table1.AddRow(new string[] {
                        "UDAC",
                        "test"});
            table1.AddRow(new string[] {
                        "RelatedOrder",
                        "test"});
#line 6
 testRunner.Given("I create a new Order", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "ID",
                        "1"});
            table2.AddRow(new string[] {
                        "ProductID",
                        "Test Product"});
            table2.AddRow(new string[] {
                        "ProductType",
                        "Type 1"});
            table2.AddRow(new string[] {
                        "Notes",
                        "test"});
            table2.AddRow(new string[] {
                        "Category",
                        "1"});
#line 23
 testRunner.And("The Line Item Exist", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "TemplateId",
                        "Test Project"});
            table3.AddRow(new string[] {
                        "WebsiteBusinessName",
                        "1"});
            table3.AddRow(new string[] {
                        "WebsiteAddressLine1",
                        "Type 1"});
            table3.AddRow(new string[] {
                        "WebsiteAddressLine2",
                        "test"});
            table3.AddRow(new string[] {
                        "WebsiteCity",
                        "1"});
            table3.AddRow(new string[] {
                        "WebsiteState",
                        "test"});
            table3.AddRow(new string[] {
                        "WebsitePostCode",
                        "test"});
            table3.AddRow(new string[] {
                        "WebsitePhone",
                        "test"});
            table3.AddRow(new string[] {
                        "WebsiteEmail",
                        "test"});
            table3.AddRow(new string[] {
                        "WebsiteMobile",
                        "test"});
#line 30
    testRunner.And("The WebsiteDetails Exist", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "CampaignName",
                        "Test Project"});
            table4.AddRow(new string[] {
                        "CampaignAddressLine1",
                        "1"});
            table4.AddRow(new string[] {
                        "CampaignPostCode",
                        "Type 1"});
            table4.AddRow(new string[] {
                        "CampaignRadius",
                        "test"});
            table4.AddRow(new string[] {
                        "LeadPhoneNumber",
                        "1"});
            table4.AddRow(new string[] {
                        "SMSPhoneNumber",
                        "test"});
            table4.AddRow(new string[] {
                        "UniqueSellingPoint1",
                        "test"});
            table4.AddRow(new string[] {
                        "UniqueSellingPoint2",
                        "test"});
            table4.AddRow(new string[] {
                        "UniqueSellingPoint3",
                        "test"});
            table4.AddRow(new string[] {
                        "Offer",
                        "test"});
            table4.AddRow(new string[] {
                        "DestinationURL",
                        "test"});
#line 42
  testRunner.And("The AdWordCampaign Exist", ((string)(null)), table4, "And ");
#line 55
    testRunner.And("ModelState is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.Then("the system should return order success message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
